#include <iostream>
#include <assert.h>
using namespace std;
template<class T>
class vector
{
public:
	vector()
		:_a(nullptr)
		, _size(0)
		, _capacity(0)
	{}
	
	~vector()
	{
		cout << "~" << endl;
		delete[]_a;
		_a = nullptr;
		_capacity = 0;
		_size = 0;
	}
	void push_back(const T& x);
	T& operator[](size_t i);
	void vector<T>::Print();
private:
	T* _a;
	size_t _size;
	size_t _capacity;

};
template<class T>
void vector<T>::push_back(const T& x)
{
	if (_size == _capacity)
	{
		size_t newcapacity = _capacity == 0 ? 2 : _capacity*2;
		T* tmp = new T[newcapacity];
		if (_a)
		{
			memcpy(tmp, _a, sizeof(T)*_size);
			delete[] _a;
		}
		_a = tmp;
		_capacity = newcapacity;
		

	}
	_a[_size] = x;
	++_size;

}
template<class T>
T& vector<T>::operator[](size_t i)
{
	assert(i < _size);
	return _a[i];
}
template<class T>
void vector<T>::Print()
{
	for (size_t i = 0; i < _size; ++i)
	{
		cout << _a[i] << endl;
	}

}
int main()
{
	vector<int>v;
	v.push_back(1);
	v.push_back(2);
	v.push_back(3);
	v.push_back(4);
	v.Print();

	cout << v[2] << endl;
	return 0;
}
